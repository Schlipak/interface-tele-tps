!function(factory){"use strict";"function"==typeof define&&define.amd?define(["angular","moment"],factory):factory(window.angular,window.moment)}(function(angular,moment){"use strict";angular.module("ui.bootstrap.datetimepicker",[]).constant("dateTimePickerConfig",{dropdownSelector:null,minuteStep:5,minView:"minute",startView:"day"}).directive("datetimepicker",["$log","dateTimePickerConfig",function($log,defaultConfig){function DateObject(){this.dateValue=(new Date).getTime(),this.selectable=!0;var validProperties=["dateValue","display","active","selectable","past","future"];for(var prop in arguments[0])validProperties.indexOf(prop)>=0&&(this[prop]=arguments[0][prop])}var validateConfiguration=function(configuration){var validOptions=["startView","minView","minuteStep","dropdownSelector"];for(var prop in configuration)if(validOptions.indexOf(prop)<0)throw"invalid option: "+prop;var validViews=["minute","hour","day","month","year"];if(validViews.indexOf(configuration.startView)<0)throw"invalid startView value: "+configuration.startView;if(validViews.indexOf(configuration.minView)<0)throw"invalid minView value: "+configuration.minView;if(validViews.indexOf(configuration.minView)>validViews.indexOf(configuration.startView))throw"startView must be greater than minView";if(!angular.isNumber(configuration.minuteStep))throw"minuteStep must be numeric";if(configuration.minuteStep<=0||configuration.minuteStep>=60)throw"minuteStep must be greater than zero and less than 60";if(null!==configuration.dropdownSelector&&!angular.isString(configuration.dropdownSelector))throw"dropdownSelector must be a string";null===configuration.dropdownSelector||"undefined"!=typeof jQuery&&"function"==typeof jQuery().dropdown||($log.error("Please DO NOT specify the dropdownSelector option unless you are using jQuery AND Bootstrap.js. Please include jQuery AND Bootstrap.js, or write code to close the dropdown in the on-set-time callback. \n\nThe dropdownSelector configuration option is being removed because it will not function properly."),delete configuration.dropdownSelector)};return{restrict:"E",require:"ngModel",template:'<div class="datetimepicker table-responsive"><table class="table table-striped">   <thead>       <tr>           <th class="left" data-ng-click="changeView(data.currentView, data.leftDate, $event)" data-ng-show="data.leftDate.selectable"><i class="glyphicon glyphicon-arrow-left"/></th>           <th class="switch" colspan="5" data-ng-show="data.previousViewDate.selectable" data-ng-click="changeView(data.previousView, data.previousViewDate, $event)">{{ data.previousViewDate.display }}</th>           <th class="right" data-ng-click="changeView(data.currentView, data.rightDate, $event)" data-ng-show="data.rightDate.selectable"><i class="glyphicon glyphicon-arrow-right"/></th>       </tr>       <tr>           <th class="dow" data-ng-repeat="day in data.dayNames" >{{ day }}</th>       </tr>   </thead>   <tbody>       <tr data-ng-if="data.currentView !== \'day\'" >           <td colspan="7" >              <span    class="{{ data.currentView }}"                        data-ng-repeat="dateObject in data.dates"                         data-ng-class="{active: dateObject.active, past: dateObject.past, future: dateObject.future, disabled: !dateObject.selectable}"                        data-ng-click="changeView(data.nextView, dateObject, $event)">{{ dateObject.display }}</span>            </td>       </tr>       <tr data-ng-if="data.currentView === \'day\'" data-ng-repeat="week in data.weeks">           <td data-ng-repeat="dateObject in week.dates"                data-ng-click="changeView(data.nextView, dateObject, $event)"               class="day"                data-ng-class="{active: dateObject.active, past: dateObject.past, future: dateObject.future, disabled: !dateObject.selectable}" >{{ dateObject.display }}</td>       </tr>   </tbody></table></div>',scope:{onSetTime:"&",beforeRender:"&"},replace:!0,link:function(scope,element,attrs,ngModelController){var directiveConfig={};attrs.datetimepickerConfig&&(directiveConfig=scope.$parent.$eval(attrs.datetimepickerConfig));var configuration={};angular.extend(configuration,defaultConfig,directiveConfig),validateConfiguration(configuration);var startOfDecade=function(unixDate){var startYear=10*parseInt(moment.utc(unixDate).year()/10,10);return moment.utc(unixDate).year(startYear).startOf("year")},dataFactory={year:function(unixDate){for(var selectedDate=moment.utc(unixDate).startOf("year"),startDecade=10*parseInt(selectedDate.year()/10,10),startDate=moment.utc(startOfDecade(unixDate)).subtract(1,"year").startOf("year"),activeYear=ngModelController.$modelValue?moment(ngModelController.$modelValue).year():0,result={currentView:"year",nextView:"year"===configuration.minView?"setTime":"month",previousViewDate:new DateObject({dateValue:null,display:startDecade+"-"+(startDecade+9)}),leftDate:new DateObject({dateValue:moment.utc(startDate).subtract(9,"year").valueOf()}),rightDate:new DateObject({dateValue:moment.utc(startDate).add(11,"year").valueOf()}),dates:[]},i=0;12>i;i+=1){var yearMoment=moment.utc(startDate).add(i,"years"),dateValue={dateValue:yearMoment.valueOf(),display:yearMoment.format("YYYY"),past:yearMoment.year()<startDecade,future:yearMoment.year()>startDecade+9,active:yearMoment.year()===activeYear};result.dates.push(new DateObject(dateValue))}return result},month:function(unixDate){for(var startDate=moment.utc(unixDate).startOf("year"),previousViewDate=startOfDecade(unixDate),activeDate=ngModelController.$modelValue?moment(ngModelController.$modelValue).format("YYYY-MMM"):0,result={previousView:"year",currentView:"month",nextView:"month"===configuration.minView?"setTime":"day",previousViewDate:new DateObject({dateValue:previousViewDate.valueOf(),display:startDate.format("YYYY")}),leftDate:new DateObject({dateValue:moment.utc(startDate).subtract(1,"year").valueOf()}),rightDate:new DateObject({dateValue:moment.utc(startDate).add(1,"year").valueOf()}),dates:[]},i=0;12>i;i+=1){var monthMoment=moment.utc(startDate).add(i,"months"),dateValue={dateValue:monthMoment.valueOf(),display:monthMoment.format("MMM"),active:monthMoment.format("YYYY-MMM")===activeDate};result.dates.push(new DateObject(dateValue))}return result},day:function(unixDate){for(var selectedDate=moment.utc(unixDate),startOfMonth=moment.utc(selectedDate).startOf("month"),previousViewDate=moment.utc(selectedDate).startOf("year"),endOfMonth=moment.utc(selectedDate).endOf("month"),startDate=moment.utc(startOfMonth).subtract(Math.abs(startOfMonth.weekday()),"days"),activeDate=ngModelController.$modelValue?moment(ngModelController.$modelValue).format("YYYY-MMM-DD"):"",result={previousView:"month",currentView:"day",nextView:"day"===configuration.minView?"setTime":"hour",previousViewDate:new DateObject({dateValue:previousViewDate.valueOf(),display:startOfMonth.format("YYYY-MMM")}),leftDate:new DateObject({dateValue:moment.utc(startOfMonth).subtract(1,"months").valueOf()}),rightDate:new DateObject({dateValue:moment.utc(startOfMonth).add(1,"months").valueOf()}),dayNames:[],weeks:[]},dayNumber=0;7>dayNumber;dayNumber+=1)result.dayNames.push(moment.utc().weekday(dayNumber).format("dd"));for(var i=0;6>i;i+=1){for(var week={dates:[]},j=0;7>j;j+=1){var monthMoment=moment.utc(startDate).add(7*i+j,"days"),dateValue={dateValue:monthMoment.valueOf(),display:monthMoment.format("D"),active:monthMoment.format("YYYY-MMM-DD")===activeDate,past:monthMoment.isBefore(startOfMonth),future:monthMoment.isAfter(endOfMonth)};week.dates.push(new DateObject(dateValue))}result.weeks.push(week)}return result},hour:function(unixDate){for(var selectedDate=moment.utc(unixDate).startOf("day"),previousViewDate=moment.utc(selectedDate).startOf("month"),activeFormat=ngModelController.$modelValue?moment(ngModelController.$modelValue).format("YYYY-MM-DD H"):"",result={previousView:"day",currentView:"hour",nextView:"hour"===configuration.minView?"setTime":"minute",previousViewDate:new DateObject({dateValue:previousViewDate.valueOf(),display:selectedDate.format("ll")}),leftDate:new DateObject({dateValue:moment.utc(selectedDate).subtract(1,"days").valueOf()}),rightDate:new DateObject({dateValue:moment.utc(selectedDate).add(1,"days").valueOf()}),dates:[]},i=0;24>i;i+=1){var hourMoment=moment.utc(selectedDate).add(i,"hours"),dateValue={dateValue:hourMoment.valueOf(),display:hourMoment.format("LT"),active:hourMoment.format("YYYY-MM-DD H")===activeFormat};result.dates.push(new DateObject(dateValue))}return result},minute:function(unixDate){for(var selectedDate=moment.utc(unixDate).startOf("hour"),previousViewDate=moment.utc(selectedDate).startOf("day"),activeFormat=ngModelController.$modelValue?moment(ngModelController.$modelValue).format("YYYY-MM-DD H:mm"):"",result={previousView:"hour",currentView:"minute",nextView:"setTime",previousViewDate:new DateObject({dateValue:previousViewDate.valueOf(),display:selectedDate.format("lll")}),leftDate:new DateObject({dateValue:moment.utc(selectedDate).subtract(1,"hours").valueOf()}),rightDate:new DateObject({dateValue:moment.utc(selectedDate).add(1,"hours").valueOf()}),dates:[]},limit=60/configuration.minuteStep,i=0;limit>i;i+=1){var hourMoment=moment.utc(selectedDate).add(i*configuration.minuteStep,"minute"),dateValue={dateValue:hourMoment.valueOf(),display:hourMoment.format("LT"),active:hourMoment.format("YYYY-MM-DD H:mm")===activeFormat};result.dates.push(new DateObject(dateValue))}return result},setTime:function(unixDate){var tempDate=new Date(unixDate),newDate=new Date(tempDate.getTime()+6e4*tempDate.getTimezoneOffset()),oldDate=ngModelController.$modelValue;return ngModelController.$setViewValue(newDate),configuration.dropdownSelector&&jQuery(configuration.dropdownSelector).dropdown("toggle"),scope.onSetTime({newDate:newDate,oldDate:oldDate}),dataFactory[configuration.startView](unixDate)}},getUTCTime=function(modelValue){var tempDate=modelValue?moment(modelValue).toDate():new Date;return tempDate.getTime()-6e4*tempDate.getTimezoneOffset()};scope.changeView=function(viewName,dateObject,event){if(event&&(event.stopPropagation(),event.preventDefault()),viewName&&dateObject.dateValue>-(1/0)&&dateObject.selectable&&dataFactory[viewName]){var result=dataFactory[viewName](dateObject.dateValue),weekDates=[];if(result.weeks)for(var i=0;i<result.weeks.length;i+=1)for(var week=result.weeks[i],j=0;j<week.dates.length;j+=1){var weekDate=week.dates[j];weekDates.push(weekDate)}scope.beforeRender({$view:result.currentView,$dates:result.dates||weekDates,$leftDate:result.leftDate,$upDate:result.previousViewDate,$rightDate:result.rightDate}),scope.data=result}},ngModelController.$render=function(){scope.changeView(configuration.startView,new DateObject({dateValue:getUTCTime(ngModelController.$viewValue)}))}}}}])});